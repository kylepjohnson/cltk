# See: https://circleci.com/docs/reference/configuration-reference/
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orbs/use/orb-intro/
orbs: {}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/reference/configuration-reference/#jobs
# https://circleci.com/docs/guides/orchestrate/jobs-steps/
jobs:
  build-and-test:
    # These next lines defines a Docker executors: https://circleci.com/docs/guides/execution-managed/circleci-images/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.13
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - run:
          name: Upgrade pip and install Poetry
          command: |
            python -m pip install --upgrade pip
            pip install poetry
      - run:
          name: Install project dependencies (including dev)
          command: |
            make installOptionals
            poetry install --with development
      - run:
          name: Run test suite
          command: make test
      - persist_to_workspace:
          root: .
          paths:
            - .

  publish-pypi:
    docker:
      - image: cimg/python:3.13
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upgrade pip and install Poetry
          command: |
            python -m pip install --upgrade pip
            pip install poetry
      - run:
          name: Configure Poetry with PyPI token
          command: |
            if [ -z "${PYPI_API_TOKEN}" ]; then
              echo "PYPI_API_TOKEN is not set" >&2
              exit 1
            fi
            poetry config pypi-token.pypi "$PYPI_API_TOKEN"
      - run:
          name: Build and publish to PyPI
          command: make publishPyPI

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  cltk-workflow:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /.*/

  release-on-tag:
    jobs:
      - build-and-test:
          name: build-and-test-release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - publish-pypi:
          requires:
            - build-and-test-release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
